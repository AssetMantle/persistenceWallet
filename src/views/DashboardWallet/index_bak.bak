import React, { useEffect } from "react";
import Wallet from "../../containers/Wallet";
import DashboardHeader from "../../containers/Common/DashboardHeader";
import GenerateKeyStore from "../../containers/GenerateKeyStore";
import ChangeKeyStorePassword from "../../containers/ChangeKeyStorePassword";
import {useDispatch} from "react-redux";
import {fetchDelegationsCount} from "../../store/actions/delegations";
import {fetchBalance, fetchTransferableVestingAmount} from "../../store/actions/balance";
import {fetchRewards, fetchTotalRewards} from "../../store/actions/rewards";
import {fetchUnbondDelegations} from "../../store/actions/unbond";
import {fetchTokenPrice} from "../../store/actions/tokenPrice";
import {fetchValidators} from "../../store/actions/validators";
import {updateFee} from "../../utils/helper";
import { useParams } from "react-router-dom";
import { LOGIN_INFO} from "../../constants/localStorage";


const DashboardWallet = () => {


    const {walletAddress} = useParams();
    const dispatch = useDispatch();

    useEffect(() => {
        async function fetchWalletApi(address) {
            await Promise.all([
                dispatch(fetchDelegationsCount(address)),
                dispatch(fetchBalance(address)),
                dispatch(fetchRewards(address)),
                dispatch(fetchTotalRewards(address)),
                dispatch(fetchUnbondDelegations(address)),
                dispatch(fetchTokenPrice()),
                dispatch(fetchTransferableVestingAmount(address)),
                dispatch(fetchValidators(address)),
                updateFee(address),
                setInterval(() => dispatch(fetchTotalRewards(address)), 10000),
            ]);
        }

        // if match params exist then fetch address details using the param
        if (walletAddress !== null && walletAddress !== undefined){
            fetchWalletApi(walletAddress);
        } 

        // if match params doesnt exist then fetch address details using the param
        else {
            const loginInfo = JSON.parse(localStorage.getItem(LOGIN_INFO));
            let address = loginInfo && loginInfo.address;
            if (address !== null && address !== undefined){
                fetchWalletApi(address);
            }
        } 
    }, [walletAddress]);


    return (
        <div className="main-section">
            <DashboardHeader/>
            <GenerateKeyStore/>
            <ChangeKeyStorePassword/>
            <div className="content-section container">
                <Wallet/>
            </div>
        </div>
    );
};

export default DashboardWallet;
